import { builders as b }    from 'ast-types'


import generateRequire      from './require'
import generateListAdd      from './listAdd'


export default ({
  name,
  fields = [],
}) => {
  const _typesDeclare = b.variableDeclaration(
    'const',
    [
      b.variableDeclarator(
        b.identifier('Types'),
        b.identifier('keystone.Field.Types'),
      )
    ]
  )

  const _listDeclare = b.variableDeclaration(
    'const',
    [
      b.variableDeclarator(
        b.identifier(name),
        b.newExpression(
          b.identifier('keystone.List'),
          [
            b.stringLiteral(name)
          ]
        )
      )
    ]
  )

  const _registerCall = b.expressionStatement(
    b.callExpression(
      b.identifier(`${ name }.register`),
      []
    )
  )

  return b.program([
    generateRequire({ name: `keystone`, from: `keystone`, }),
    _typesDeclare,
    _listDeclare,
    generateListAdd({ name, fields }),
    _registerCall,
  ])
}